{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fetchAdvice","url","a","fetch","res","json","resData","slip","advice","App","adviceUrl","useState","isLoading","adviceState","setAdviceState","useEffect","then","state","console","log","className","error","errorMessage","onClick","clearTimeout","errorId","catch","err","setTimeout","message","includes","replace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAIMA,G,MAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACAC,MAAMF,GADN,cACZG,EADY,gBAEIA,EAAIC,OAFR,cAEZC,EAFY,yBAGXA,EAAQC,KAAKC,QAHF,2CAAH,uDAsFFC,EAjFH,WACV,IAAMC,EAAY,oCADF,EAEsBC,mBAAS,CAC7CH,OAAQ,sBACRI,WAAW,IAJG,mBAETC,EAFS,KAEIC,EAFJ,KAehB,OARAC,qBAAU,WACRf,EAAYU,GAAWM,MAAK,SAACR,GAAD,OAC1BM,GAAe,SAACG,GAAD,sBAAiBA,EAAjB,CAAwBT,mBAExC,CAACE,IAEJQ,QAAQC,IAAIN,GAGV,kBAAC,WAAD,KACE,yBAAKO,UAAWP,EAAYQ,MAAQ,iBAAmB,YACrD,yBAAKD,UAAWP,EAAYQ,MAAQ,cAAgB,SAClD,2BAAIR,EAAYS,cAChB,4BACEC,QAAS,WACPT,GAAe,SAACG,GAAD,sBACVA,EADU,CAEbI,OAAO,SAJb,QAYJ,yBAAKD,UAAU,OACb,yBAAKA,UAAU,QACb,4BAAKP,EAAYL,QACjB,4BACEe,QAAS,WAEPT,GAAe,SAACG,GAAD,sBAAiBA,EAAjB,CAAwBL,WAAW,OAClDY,aAAaX,EAAYY,SACzBP,QAAQC,IAAI,kBACZnB,EAAYU,GACTM,MAAK,SAACR,GAAD,OACJM,GAAe,SAACG,GAAD,sBACVA,EADU,CAEbT,SACAI,WAAW,UAGdc,OAAM,SAACC,GACN,IAAMF,EAAUG,YAAW,WACzBd,GAAe,SAACG,GAAD,sBACVA,EADU,CAEbI,OAAO,SAER,KAECM,EAAIE,QAAQC,SAAS,cACvBH,EAAIE,QAAUF,EAAIE,QAAQE,QAAQ,WAAY,WAGhDjB,GAAe,SAACG,GAAD,sBACVA,EADU,CAEbL,WAAW,EACXS,OAAO,EACPC,aAAcK,EAAIE,QAClBJ,eAEFP,QAAQC,IAAI,wBAAyBQ,EAAIE,cAjCjD,iBAqCiB,IACf,0BAAMT,UAAWP,EAAYD,UAAY,UAAY,UCtE7CoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.018d7f0b.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nconst fetchAdvice = async (url) => {\n  const res = await fetch(url);\n  const resData = await res.json();\n  return resData.slip.advice;\n};\nconst App = () => {\n  const adviceUrl = \"https://api.adviceslip.com/advice\";\n  const [adviceState, setAdviceState] = useState({\n    advice: \"Default advice here\",\n    isLoading: false,\n  });\n\n  useEffect(() => {\n    fetchAdvice(adviceUrl).then((advice) =>\n      setAdviceState((state) => ({ ...state, advice }))\n    );\n  }, [adviceUrl]);\n\n  console.log(adviceState);\n\n  return (\n    <Fragment>\n      <div className={adviceState.error ? \"modal-bg slide\" : \"modal-bg\"}>\n        <div className={adviceState.error ? \"modal slide\" : \"modal\"}>\n          <p>{adviceState.errorMessage}</p>\n          <button\n            onClick={() => {\n              setAdviceState((state) => ({\n                ...state,\n                error: false,\n              }));\n            }}\n          >\n            OK\n          </button>\n        </div>\n      </div>\n      <div className=\"app\">\n        <div className=\"card\">\n          <h1>{adviceState.advice}</h1>\n          <button\n            onClick={() => {\n              // trigger isLoading\n              setAdviceState((state) => ({ ...state, isLoading: true }));\n              clearTimeout(adviceState.errorId);\n              console.log(\"I got clicked!\");\n              fetchAdvice(adviceUrl)\n                .then((advice) =>\n                  setAdviceState((state) => ({\n                    ...state,\n                    advice,\n                    isLoading: false,\n                  }))\n                )\n                .catch((err) => {\n                  const errorId = setTimeout(() => {\n                    setAdviceState((state) => ({\n                      ...state,\n                      error: false,\n                    }));\n                  }, 5000);\n\n                  if (err.message.includes(\"resource\")) {\n                    err.message = err.message.replace(\"resource\", \"advice\");\n                  }\n\n                  setAdviceState((state) => ({\n                    ...state,\n                    isLoading: false,\n                    error: true,\n                    errorMessage: err.message,\n                    errorId,\n                  }));\n                  console.log(\"no network, try again\", err.message);\n                });\n            }}\n          >\n            Give me advice{\" \"}\n            <span className={adviceState.isLoading ? \"loading\" : \"\"}></span>\n          </button>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}